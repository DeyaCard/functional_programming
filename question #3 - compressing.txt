// Question #3: Compressing Strings

// Write an algorithm that takes a string with repeated characters and compresses them, 
// using a number to show how many times the repeated character has been compressed. 
// For instance, aaa would be written as 3a. 
// Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"


solution: 

let newString = "aaabccdddda";
function compressedString(string){
  let stringArray = string.split('');
  let newArray = [];
  let counter = 1;
  for(let i=0; i < stringArray.length; i ++){
    if(stringArray[i] === stringArray[i+1]){
    counter += 1;
    }
    else if(counter >= 2){
      newArray.push(counter + stringArray[i]);
      counter = 1;
    }
    else{
        newArray.push(stringArray[i]);
      }
    }
    console.log(newArray.join(''));
}
compressedString(newString);

solution:
function compressedString(string){
  let newString = "";
  let counter = 1; 3
  for(let i=0; i < string.length; i++){
    if(string[i] === string[i+1]){
      counter += 1;
    }
    else if( counter >= 2){
      newString += counter += string[i];
      counter = 1;
    }
    else{
      newString += string[i];
    }
  }
  return newString;
}



SOLVE WITHOUT RECURSION





SOLVE WITH RECURSION